package com.templating;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.codehaus.jackson.map.ObjectMapper;
import org.jfrog.maven.annomojo.annotations.MojoExecute;
import org.jfrog.maven.annomojo.annotations.MojoGoal;
import org.jfrog.maven.annomojo.annotations.MojoParameter;
import org.jfrog.maven.annomojo.annotations.MojoPhase;

@MojoGoal("generate-js")
@MojoPhase("compile")
@MojoExecute(phase="compile")
public class HTMLTemplateToJavascriptMojo extends AbstractMojo {

	
	@MojoParameter(alias="js-template-map-var", defaultValue = "App.templates")
	private String jsTemplateMapVar;
	
    @MojoParameter(alias="templates-folder", defaultValue = "Annotated plugin active and working")
    private String templatesFolder;

    @MojoParameter(alias="output-file", defaultValue = "/src/main/webapp/compiledTemplates.js")
    private String outputFile;
    
    @MojoParameter(expression="${project.build.directory}")
    private String projectBuildDirectory;		
    		
    @MojoParameter(expression = "${basedir}", required = true, readonly = true, description = "The Maven Project")
    private String basedir;
    
    public String getTemplatesFolder() {
        return templatesFolder;
    }
    
	public String getOutputFile() {
		return outputFile;
	}

    public void execute() throws MojoExecutionException {
    	getLog().info( "HTMLTemplateToJavascriptMojo!" );
        getLog().info( "Proccesing templatesFolder :" + getTemplatesFolder());
        getLog().info( "Output File :" + getOutputFile());
        getLog().info( "Basedir: " + basedir);
        getLog().info( "projectBuildDirectory: " + projectBuildDirectory);

        File templatesFolderDirectory = new File( getTemplatesFolder());
        File outputFileFile = new File( getOutputFile());
        
        if( templatesFolderDirectory.isDirectory() )
        {
        	
        	File[] listFiles = templatesFolderDirectory.listFiles();
        	getLog().info(outputFileFile.getAbsolutePath());
        	if( !outputFileFile.exists() || outputFileFile.delete() )
        	{
        		try {
        			outputFileFile.createNewFile();
					FileOutputStream fileOutputStream = new FileOutputStream(outputFileFile);
					
					Map<String, String> map = new HashMap<String, String>(); 

					for (File file : listFiles) {
						
						if( !file.isHidden() )
						{
							getLog().info("Processing: " + file.getAbsolutePath());
							FileInputStream fileInputStream = new FileInputStream(file);
							
							BufferedReader reader = new BufferedReader(new InputStreamReader(fileInputStream, Charset.forName("UTF-8")));
							String line;
							StringBuilder htmlTemplate = new StringBuilder();
							try {
								while ((line = reader.readLine()) != null) {
									htmlTemplate.append( line.trim() ); 
								}
								
								String htmlTemplateFinal = htmlTemplate.toString().replaceAll("(?s)<!--.*?-->", ""); // Removes the html comments
								htmlTemplateFinal = htmlTemplateFinal.replaceAll("'", "\\\\'"); // Escapes the simple quotes ' => \'
										
										// Adds the html template to the map
								map.put(file.getName().replaceAll(".html", ""), htmlTemplateFinal);
	
	
	
							} catch (IOException e1) {
								e1.printStackTrace();
							}
						}
					}
					
					try {
						fileOutputStream.write(("/** File generated by htmltemplate2js-plugin on date "+new Date()+" */\n").getBytes(Charset.forName("UTF-8")));
						fileOutputStream.write(jsTemplateMapVar.getBytes(Charset.forName("UTF-8")));
						fileOutputStream.write("=".getBytes(Charset.forName("UTF-8")));
						ObjectMapper mapper = new ObjectMapper();
						fileOutputStream.write(mapper.writeValueAsBytes(map));
						
						
					} catch (IOException e) {
						e.printStackTrace();
					}
					
				} catch (FileNotFoundException e) {
	        		getLog().warn( "FileNotFoundException output file: " + getOutputFile() );
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        		
        	} else {
        		getLog().warn( "error deleting output file: " + getOutputFile() );
        	}
        	
        } else {
            getLog().warn( getTemplatesFolder() + " is not a directory");
        }

    }



}
